//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EngageTimer.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EngageTimer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized argument for {0}: {1}.
        /// </summary>
        internal static string MainCommand_Error_InvalidArgument {
            get {
                return ResourceManager.GetString("MainCommand_Error_InvalidArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized subcommand: {0}.
        /// </summary>
        internal static string MainCommand_Error_InvalidSubcommand {
            get {
                return ResourceManager.GetString("MainCommand_Error_InvalidSubcommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to enable or disable the big countdown (toggles by default).
        /// </summary>
        internal static string MainCommand_Help_Countdown {
            get {
                return ResourceManager.GetString("MainCommand_Help_Countdown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Countdown is now {0}.
        /// </summary>
        internal static string MainCommand_Help_Countdown_Success {
            get {
                return ResourceManager.GetString("MainCommand_Help_Countdown_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to enable or disable the server info bar (toggles by default).
        /// </summary>
        internal static string MainCommand_Help_Dtr {
            get {
                return ResourceManager.GetString("MainCommand_Help_Dtr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server info bar is now {0}.
        /// </summary>
        internal static string MainCommand_Help_Dtr_Success {
            get {
                return ResourceManager.GetString("MainCommand_Help_Dtr_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to enable or disable the floating window (toggles by default).
        /// </summary>
        internal static string MainCommand_Help_FW {
            get {
                return ResourceManager.GetString("MainCommand_Help_FW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating window is now {0}.
        /// </summary>
        internal static string MainCommand_Help_FW_Success {
            get {
                return ResourceManager.GetString("MainCommand_Help_FW_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to open the settings menu.
        /// </summary>
        internal static string MainCommand_Help_Settings {
            get {
                return ResourceManager.GetString("MainCommand_Help_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to disabled.
        /// </summary>
        internal static string MainCommand_Status_Off {
            get {
                return ResourceManager.GetString("MainCommand_Status_Off", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to enabled.
        /// </summary>
        internal static string MainCommand_Status_On {
            get {
                return ResourceManager.GetString("MainCommand_Status_On", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close.
        /// </summary>
        internal static string Settings_Close {
            get {
                return ResourceManager.GetString("Settings_Close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable accurate countdown mode (countdown - 1).
        /// </summary>
        internal static string Settings_CountdownTab_AccurateMode {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_AccurateMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses the actual and precise countdown value instead of the rounded-up value the game originally shows.
        ///I strongly recommend enabling this option when using decimals as they would not make sense otherwise.
        ///However, I recommend disabling this if you don&apos;t use decimals so that the numbers will match what is displayed for your party members.
        ///        
        ///Note: this setting only works when the original countdown is hidden (otherwise it would display 6 - 5 - 5 - 4...).
        /// </summary>
        internal static string Settings_CountdownTab_AccurateMode_Help {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_AccurateMode_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable animation.
        /// </summary>
        internal static string Settings_CountdownTab_Animate {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Animate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Light effect.
        /// </summary>
        internal static string Settings_CountdownTab_AnimateOpacity {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_AnimateOpacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scaling effect.
        /// </summary>
        internal static string Settings_CountdownTab_AnimateScale {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_AnimateScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play a ticking sound for all numbers.
        /// </summary>
        internal static string Settings_CountdownTab_Audio_Enable {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Audio_Enable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use legacy audio (breaks linux).
        /// </summary>
        internal static string Settings_CountdownTab_Audio_LegacyAudio {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Audio_LegacyAudio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will be removed, please contact me if you use it. Crashes on non-Windows systems..
        /// </summary>
        internal static string Settings_CountdownTab_Audio_LegacyAudio_Help {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Audio_LegacyAudio_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sound volume.
        /// </summary>
        internal static string Settings_CountdownTab_Audio_LegacyVolume {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Audio_LegacyVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use duty pop timer sound.
        /// </summary>
        internal static string Settings_CountdownTab_Audio_UseAlternativeSound {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Audio_UseAlternativeSound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alignement.
        /// </summary>
        internal static string Settings_CountdownTab_CountdownAlign {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_CountdownAlign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display.
        /// </summary>
        internal static string Settings_CountdownTab_CountdownDecimals_Left {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_CountdownDecimals_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to decimals in countdown.
        /// </summary>
        internal static string Settings_CountdownTab_CountdownDecimals_Right {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_CountdownDecimals_Right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display threshold.
        /// </summary>
        internal static string Settings_CountdownTab_CountdownDisplayThreshold {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_CountdownDisplayThreshold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This setting determines at what point during the countdown the timer will become visible. For example, if the value is set to 7, the countdown timer will not be shown until 7 seconds have passed, and will then be displayed until the end of the countdown..
        /// </summary>
        internal static string Settings_CountdownTab_CountdownDisplayThreshold_Help {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_CountdownDisplayThreshold_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scale.
        /// </summary>
        internal static string Settings_CountdownTab_CountdownScale {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_CountdownScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Center countdown window.
        /// </summary>
        internal static string Settings_CountdownTab_CountdownWindowCentered {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_CountdownWindowCentered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable big countdown.
        /// </summary>
        internal static string Settings_CountdownTab_Enable {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Enable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scale.
        /// </summary>
        internal static string Settings_CountdownTab_FloatingWindowScale {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_FloatingWindowScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide original countdown.
        /// </summary>
        internal static string Settings_CountdownTab_HideOriginalCountDown {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_HideOriginalCountDown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Also replace numbers before 5.
        /// </summary>
        internal static string Settings_CountdownTab_HideOriginalCountDown_Help {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_HideOriginalCountDown_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;big countdown&quot; feature adds the missing numbers to the in-game timer !.
        /// </summary>
        internal static string Settings_CountdownTab_Info1 {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Info1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fixed width.
        /// </summary>
        internal static string Settings_CountdownTab_Monospaced {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Monospaced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using the multi monitor windows option, positioning the countdown outside of the game (even a little bit) will create a background. As rendering transparent windows is impossible outside of the game, this cannot be fixed for now. Please use the border as a guide..
        /// </summary>
        internal static string Settings_CountdownTab_MultiMonitorWarning {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_MultiMonitorWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to hue.
        /// </summary>
        internal static string Settings_CountdownTab_NumberHue {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberHue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to brightness.
        /// </summary>
        internal static string Settings_CountdownTab_NumberLuminance {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberLuminance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recolor instead of shifting hue.
        /// </summary>
        internal static string Settings_CountdownTab_NumberRecolor {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberRecolor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to saturation.
        /// </summary>
        internal static string Settings_CountdownTab_NumberSaturation {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberSaturation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More options.
        /// </summary>
        internal static string Settings_CountdownTab_NumberStyle_Advanced {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberStyle_Advanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pixels.
        /// </summary>
        internal static string Settings_CountdownTab_NumberStyle_CustomNegativeMargin {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberStyle_CustomNegativeMargin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable custom negative margin.
        /// </summary>
        internal static string Settings_CountdownTab_NumberStyle_EnableCustomNegativeMargin {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberStyle_EnableCustomNegativeMargin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a leading 0.
        /// </summary>
        internal static string Settings_CountdownTab_NumberStyle_LeadingZero {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberStyle_LeadingZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Color.
        /// </summary>
        internal static string Settings_CountdownTab_NumberStyleTitle {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_NumberStyleTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Countdown offset.
        /// </summary>
        internal static string Settings_CountdownTab_OffsetText {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_OffsetText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to X%.
        /// </summary>
        internal static string Settings_CountdownTab_OffsetX {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_OffsetX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Y%.
        /// </summary>
        internal static string Settings_CountdownTab_OffsetY {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_OffsetY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Position and size.
        /// </summary>
        internal static string Settings_CountdownTab_PositioningTitle {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_PositioningTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning : when not hiding the original countdown, changing values in this section might create incoherent results.
        /// </summary>
        internal static string Settings_CountdownTab_PositionWarning {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_PositionWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable test mode.
        /// </summary>
        internal static string Settings_CountdownTab_Test_Start {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Test_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable test mode.
        /// </summary>
        internal static string Settings_CountdownTab_Test_Stop {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Test_Stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number style.
        /// </summary>
        internal static string Settings_CountdownTab_Texture {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Texture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom.
        /// </summary>
        internal static string Settings_CountdownTab_Texture_custom {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Texture_custom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load.
        /// </summary>
        internal static string Settings_CountdownTab_Texture_Custom_Load {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Texture_Custom_Load", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture Folder.
        /// </summary>
        internal static string Settings_CountdownTab_Texture_Custom_Path {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Texture_Custom_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FFXIV.
        /// </summary>
        internal static string Settings_CountdownTab_Texture_default {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Texture_default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WoW.
        /// </summary>
        internal static string Settings_CountdownTab_Texture_wow {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Texture_wow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Readable.
        /// </summary>
        internal static string Settings_CountdownTab_Texture_yellow {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Texture_yellow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Big countdown.
        /// </summary>
        internal static string Settings_CountdownTab_Title {
            get {
                return ResourceManager.GetString("Settings_CountdownTab_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always hide when not bound by duty.
        /// </summary>
        internal static string Settings_DtrCombatTimer_AlwaysDisableOutsideDuty {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_AlwaysDisableOutsideDuty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Milliseconds to show.
        /// </summary>
        internal static string Settings_DtrCombatTimer_DecimalPrecision {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_DecimalPrecision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset to default.
        /// </summary>
        internal static string Settings_DtrCombatTimer_Defaults {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_Defaults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable Server Info Bar integation.
        /// </summary>
        internal static string Settings_DtrCombatTimer_Enable {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_Enable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide.
        /// </summary>
        internal static string Settings_DtrCombatTimer_HideAfter {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_HideAfter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to seconds after combat end.
        /// </summary>
        internal static string Settings_DtrCombatTimer_HideAfterRight {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_HideAfterRight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefix.
        /// </summary>
        internal static string Settings_DtrCombatTimer_Prefix {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_Prefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffix.
        /// </summary>
        internal static string Settings_DtrCombatTimer_Suffix {
            get {
                return ResourceManager.GetString("Settings_DtrCombatTimer_Suffix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This option will display the current combat time in the Server Info Bar (right next to the world &amp; time). Please note that you can reorder all integrations in Dalamud Settings..
        /// </summary>
        internal static string Settings_DtrTab_Info {
            get {
                return ResourceManager.GetString("Settings_DtrTab_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server Info Bar.
        /// </summary>
        internal static string Settings_DtrTab_Title {
            get {
                return ResourceManager.GetString("Settings_DtrTab_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable accurate countdown in floating window.
        /// </summary>
        internal static string Settings_FWTab_AccurateCountdown {
            get {
                return ResourceManager.GetString("Settings_FWTab_AccurateCountdown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See the Big countdown tab for an explanation.
        /// </summary>
        internal static string Settings_FWTab_AccurateCountdown_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_AccurateCountdown_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide.
        /// </summary>
        internal static string Settings_FWTab_AutoHide_Left {
            get {
                return ResourceManager.GetString("Settings_FWTab_AutoHide_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to seconds after combat end.
        /// </summary>
        internal static string Settings_FWTab_AutoHide_Right {
            get {
                return ResourceManager.GetString("Settings_FWTab_AutoHide_Right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Background color and opacity.
        /// </summary>
        internal static string Settings_FWTab_BackgroundColor {
            get {
                return ResourceManager.GetString("Settings_FWTab_BackgroundColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display the &quot;-&quot; sign.
        /// </summary>
        internal static string Settings_FWTab_CountdownNegativeSign {
            get {
                return ResourceManager.GetString("Settings_FWTab_CountdownNegativeSign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows the current countdown value (e.g. -13).
        /// </summary>
        internal static string Settings_FWTab_CountdownPrecision_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_CountdownPrecision_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display countdown.
        /// </summary>
        internal static string Settings_FWTab_CountdownPrecision_Left {
            get {
                return ResourceManager.GetString("Settings_FWTab_CountdownPrecision_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to decimals.
        /// </summary>
        internal static string Settings_FWTab_CountdownPrecision_Right {
            get {
                return ResourceManager.GetString("Settings_FWTab_CountdownPrecision_Right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display countdown with.
        /// </summary>
        internal static string Settings_FWTab_CountdownPrecision_With_Left {
            get {
                return ResourceManager.GetString("Settings_FWTab_CountdownPrecision_With_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable floating window.
        /// </summary>
        internal static string Settings_FWTab_Display {
            get {
                return ResourceManager.GetString("Settings_FWTab_Display", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide combat time when not bound by duty.
        /// </summary>
        internal static string Settings_FWTab_DisplayStopwatchOnlyInDuty {
            get {
                return ResourceManager.GetString("Settings_FWTab_DisplayStopwatchOnlyInDuty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Basically hides the stopwatch when you are in the overworld.
        /// </summary>
        internal static string Settings_FWTab_DisplayStopwatchOnlyInDuty_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_DisplayStopwatchOnlyInDuty_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Font size.
        /// </summary>
        internal static string Settings_FWTab_FontSize {
            get {
                return ResourceManager.GetString("Settings_FWTab_FontSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The floating window is a movable window that can display the countdown and the current combat duration..
        /// </summary>
        internal static string Settings_FWTab_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock floating window.
        /// </summary>
        internal static string Settings_FWTab_Lock {
            get {
                return ResourceManager.GetString("Settings_FWTab_Lock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disables clicking and moving the window..
        /// </summary>
        internal static string Settings_FWTab_Lock_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_Lock_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Offset in seconds.
        /// </summary>
        internal static string Settings_FWTab_PrePullOffset {
            get {
                return ResourceManager.GetString("Settings_FWTab_PrePullOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave at 0 unless you have very consistent lag or some specific reason..
        /// </summary>
        internal static string Settings_FWTab_PrePullOffset_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_PrePullOffset_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable pre-pull warning.
        /// </summary>
        internal static string Settings_FWTab_ShowPrePulling {
            get {
                return ResourceManager.GetString("Settings_FWTab_ShowPrePulling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes the countdown color when casting a spell that would result in a pre-pull..
        /// </summary>
        internal static string Settings_FWTab_ShowPrePulling_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_ShowPrePulling_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display combat time in seconds instead of time format.
        /// </summary>
        internal static string Settings_FWTab_StopwatchAsSeconds {
            get {
                return ResourceManager.GetString("Settings_FWTab_StopwatchAsSeconds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows the current combat duration.
        /// </summary>
        internal static string Settings_FWTab_StopwatchPrecision_Help {
            get {
                return ResourceManager.GetString("Settings_FWTab_StopwatchPrecision_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display combat timer.
        /// </summary>
        internal static string Settings_FWTab_StopwatchPrecision_Left {
            get {
                return ResourceManager.GetString("Settings_FWTab_StopwatchPrecision_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to decimals.
        /// </summary>
        internal static string Settings_FWTab_StopwatchPrecision_Right {
            get {
                return ResourceManager.GetString("Settings_FWTab_StopwatchPrecision_Right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display combat timer with.
        /// </summary>
        internal static string Settings_FWTab_StopwatchPrecision_With_Left {
            get {
                return ResourceManager.GetString("Settings_FWTab_StopwatchPrecision_With_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Styling.
        /// </summary>
        internal static string Settings_FWTab_Styling {
            get {
                return ResourceManager.GetString("Settings_FWTab_Styling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text align.
        /// </summary>
        internal static string Settings_FWTab_TextAlign {
            get {
                return ResourceManager.GetString("Settings_FWTab_TextAlign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Center.
        /// </summary>
        internal static string Settings_FWTab_TextAlign_Center {
            get {
                return ResourceManager.GetString("Settings_FWTab_TextAlign_Center", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Left.
        /// </summary>
        internal static string Settings_FWTab_TextAlign_Left {
            get {
                return ResourceManager.GetString("Settings_FWTab_TextAlign_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Right.
        /// </summary>
        internal static string Settings_FWTab_TextAlign_Right {
            get {
                return ResourceManager.GetString("Settings_FWTab_TextAlign_Right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text color.
        /// </summary>
        internal static string Settings_FWTab_TextColor {
            get {
                return ResourceManager.GetString("Settings_FWTab_TextColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating window.
        /// </summary>
        internal static string Settings_FWTab_Title {
            get {
                return ResourceManager.GetString("Settings_FWTab_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EngageTimer settings.
        /// </summary>
        internal static string Settings_Title {
            get {
                return ResourceManager.GetString("Settings_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable webserver on port.
        /// </summary>
        internal static string Settings_Web_EnablePort {
            get {
                return ResourceManager.GetString("Settings_Web_EnablePort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature allows you to add a countdown and stopwatch overlay into your OBS (or other software) streams and recordings via a browser source..
        /// </summary>
        internal static string Settings_Web_Help {
            get {
                return ResourceManager.GetString("Settings_Web_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To add it to your scene, enable the webserver then create a browser source in your scene and add the following URL : .
        /// </summary>
        internal static string Settings_Web_HelpAdd {
            get {
                return ResourceManager.GetString("Settings_Web_HelpAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recommended window size is 300x100..
        /// </summary>
        internal static string Settings_Web_HelpSize {
            get {
                return ResourceManager.GetString("Settings_Web_HelpSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide overlay.
        /// </summary>
        internal static string Settings_Web_Hide_Left {
            get {
                return ResourceManager.GetString("Settings_Web_Hide_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to seconds after combat ends.
        /// </summary>
        internal static string Settings_Web_Hide_Right {
            get {
                return ResourceManager.GetString("Settings_Web_Hide_Right", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web Server (OBS).
        /// </summary>
        internal static string Settings_Web_Title {
            get {
                return ResourceManager.GetString("Settings_Web_Title", resourceCulture);
            }
        }
    }
}
